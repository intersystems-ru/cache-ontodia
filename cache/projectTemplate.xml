<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (SUSE Linux Enterprise Server for x86-64) 2016.2 (Build 577U)" ts="2016-04-13 12:26:45">
<Class name="ClassExplorer.ClassView">
<Description>
Cache Class Explorer vX.X.X/*build.replace:pkg.version*/
Class contains methods that return structured classes/packages data.</Description>
<TimeChanged>64010,55351.57242</TimeChanged>
<TimeCreated>63653,67019.989197</TimeCreated>

<Method name="getAllNamespacesList">
<Description>
Return list with all namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set resp = ##class(%ZEN.proxyObject).%New()
    set resp.namespaces = ##class(%ZEN.proxyObject).%New()
    set resp.currentNamespace = $NAMESPACE
    set result = ##class(%ResultSet).%New("%SYS.Namespace:List")
    do result.Execute()
    while (result.Next()) {
        set ns = ##class(%ZEN.proxyObject).%New()
        set ns.remote = result.Get("Remote")
        set ns.status = result.Get("Status")
        do resp.namespaces.%DispatchSetProperty(result.Get("Nsp"), ns)
    }
    return resp
]]></Implementation>
</Method>

<Method name="getClassTree">
<Description>
Returns structured class tree with all classes available in current namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set resp = ##class(%ZEN.proxyObject).%New()

    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    set objects = ##class(%Library.ArrayOfObjects).%New()
    set lastParts = $LB()

    set level = 1
    do objects.SetAt(resp, level)

    do classes.Execute()
    while (classes.Next()) {
        set name = classes.Data("Name")
        if ($EXTRACT(name, 1, 1) = "%") && ($NAMESPACE '= "%SYS") { continue }
        set parts = $LISTFROMSTRING(name, ".")
        set level = 1
        while ((level < $LISTLENGTH(parts)) && ($LISTGET(lastParts, level) = ("/"_$LISTGET(parts, level)))) {
            set level = level + 1
        }
        set resp = objects.GetAt(level)
        if (resp="") {
            set resp = ##class(%ZEN.proxyObject).%New()
            do objects.GetAt(level - 1).%DispatchSetProperty("/" _ $LISTGET(parts, level - 1), resp)
            do objects.SetAt(resp, level)
        }
        while ($LISTLENGTH(parts) > level) {
            set level = level + 1
            set resp = ##class(%ZEN.proxyObject).%New()
            do objects.GetAt(level - 1).%DispatchSetProperty("/" _ $LISTGET(parts, level - 1), resp)
            do objects.SetAt(resp, level)
        }
        if ($LISTLENGTH(parts) = level) {
            do resp.%DispatchSetProperty($LISTGET(parts, level), classes.Data("Hidden"))
        }
        set lastParts = parts
        for i=1:1:$LISTLENGTH(lastParts)-1 {
            set $LIST(lastParts, i) = "/"_$LISTGET(lastParts, i)
        }
    }

    quit objects.GetAt(1)
]]></Implementation>
</Method>

<Method name="fillClassData">
<Description>
Return structured data about class.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,className:%String,level:%String="",currLevel:%Integer=0</FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    if ((level'="") && (+currLevel>+level)) { quit "" }
    set currLevel = $increment(currLevel)
    set classDefinition = ##class(%Dictionary.ClassDefinition).%OpenId(className)
    set compiledClassDefinition = ##class(%Dictionary.CompiledClass).%OpenId(className)
    if (classDefinition = "") || (oData.classes.%DispatchGetProperty(classDefinition.Name) '= "") quit ""

    set oClass = ##class(%ZEN.proxyObject).%New()
    do oData.classes.%DispatchSetProperty(classDefinition.Name, oClass) // prevent from recursive setup
    set package = $LISTTOSTRING($LIST($LISTFROMSTRING(classDefinition.Name, "."), 1, *-1),".")
    set oProperties = ##class(%ZEN.proxyObject).%New()
    set oQueries = ##class(%ZEN.proxyObject).%New()
    set oIndices = ##class(%ZEN.proxyObject).%New()
    set oXDatas = ##class(%ZEN.proxyObject).%New()

    set oClass.isDataType = classDefinition.ClientDataTypeIsDefined()
    set oClass.isOdbcType = classDefinition.OdbcTypeIsDefined()
    set oClass.isSoapBindingStyle = classDefinition.SoapBindingStyleIsDefined()
    set oClass.isSoapBodyUse = classDefinition.SoapBodyUseIsDefined()
    set oClass.isSqlCategory = classDefinition.SqlCategoryIsDefined()

    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.ClassDefinition")
    for j=1:1:props.Properties.Count() {
        set pname = props.Properties.GetAt(j).Name
        set:((pname '= "parent")
             && ('props.Properties.GetAt(j).Private)
             && ('$IsObject($PROPERTY(classDefinition, pname)))) $PROPERTY(oClass, pname) = $PROPERTY(classDefinition, pname)
    }
    if (oClass.TimeChanged) { set oClass.TimeChanged = $zdatetime(oClass.TimeChanged) }
    if (oClass.TimeCreated) { set oClass.TimeCreated = $zdatetime(oClass.TimeCreated) }
    if ((compiledClassDefinition '= "") && (compiledClassDefinition.ClassType '= "")) {
        set oClass.ClassType = compiledClassDefinition.ClassType // set class type from all inherited classes
    }

    set oClass.Super = "" // do not quit with super at this moment
    if (oData.restrictPackage) && ('..inPackage(oData.basePackageName, package)) quit oClass
    set oClass.Super = ..correctInheritance(oData, classDefinition, package) // now expand super names

    set oClass.properties = oProperties
    set count = classDefinition.Properties.Count()
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.PropertyDefinition")
    for i=1:1:count {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Properties.GetAt(i)
        do oProperties.%DispatchSetProperty(p.Name, oProp)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:(pname '= "parent") $PROPERTY(oProp, pname) = $PROPERTY(p, pname)
        }
        if (..classExists(package _ "." _ p.Type)) {
            set oProp.Type = package _ "." _ p.Type
            do ..fillClassData(oData, package _ "." _ p.Type, level, currLevel)
        } elseif (..classExists(..extendClassFromType(p.Type))) {
            set oProp.Type = ..extendClassFromType(p.Type)
            do ..fillClassData(oData, ..extendClassFromType(p.Type), level, currLevel)
        }  else {
            set oProp.Type = ..extendClassFromType(p.Type)
        }
    }

    set oMethods = ##class(%ZEN.proxyObject).%New()
    set oClass.methods = oMethods
    set count = classDefinition.Methods.Count()
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.MethodDefinition")
    for i=1:1:count {
        set oMeth = ##class(%ZEN.proxyObject).%New()
        set met = classDefinition.Methods.GetAt(i)
        do oMethods.%DispatchSetProperty(met.Name, oMeth)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:((pname '= "parent") && (pname '= "Implementation")) $PROPERTY(oMeth, pname) = $PROPERTY(met, pname)
        }
    }

    set oParameters = ##class(%ZEN.proxyObject).%New()
    set oClass.parameters = oParameters
    set count = classDefinition.Parameters.Count()
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.ParameterDefinition")
    for i=1:1:count {
        set oPar = ##class(%ZEN.proxyObject).%New()
        set p = classDefinition.Parameters.GetAt(i)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:(pname '= "parent") $PROPERTY(oPar, pname) = $PROPERTY(p, pname)
        }
        do oParameters.%DispatchSetProperty(p.Name, oPar)
    }

    #dim q as %Dictionary.QueryDefinition
    set oClass.queries = oQueries
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.QueryDefinition")
    for i=1:1:classDefinition.Queries.Count() {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set q = classDefinition.Queries.GetAt(i)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:(pname '= "parent") $PROPERTY(oProp, pname) = $PROPERTY(q, pname)
        }
        do oQueries.%DispatchSetProperty(q.Name, oProp)
    }

    #dim xd as %Dictionary.XDataDefinition
    set oClass.xdatas = oXDatas
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.XDataDefinition")
    for i=1:1:classDefinition.XDatas.Count() {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set xd = classDefinition.XDatas.GetAt(i)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:((pname '= "parent") && (pname '= "Object")) $PROPERTY(oProp, pname) = $PROPERTY(xd, pname)
        }
        do oXDatas.%DispatchSetProperty(xd.Name, oProp)
    }

    #dim ind as %Dictionary.IndexDefinition
    set oClass.indices = oIndices
    set props = ##class(%Dictionary.ClassDefinition).%OpenId("%Dictionary.IndexDefinition")
    for i=1:1:classDefinition.Indices.Count() {
        set oProp = ##class(%ZEN.proxyObject).%New()
        set ind = classDefinition.Indices.GetAt(i)
        for j=1:1:props.Properties.Count() {
            set pname = props.Properties.GetAt(j).Name
            set:(pname '= "parent") $PROPERTY(oProp, pname) = $PROPERTY(ind, pname)
        }
        do oIndices.%DispatchSetProperty(ind.Name, oProp)
    }

    do ..collectInheritance(oData, oClass.Super, level, currLevel)

    quit oClass
]]></Implementation>
</Method>

<Method name="getMethod">
<Description>
Return method data.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String,methodName:%String,namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    zn:$GET(namespace)'="" namespace
    set oMeth = ##class(%ZEN.proxyObject).%New()
    set met = ##class(%Dictionary.MethodDefinition).%OpenId(className _ "||" _ methodName)
    if (met = "") { set oMeth.error = 1 quit oMeth }

    set oMeth.description = met.Description
    set oMeth.arguments = met.FormalSpec
    set oMeth.returns = met.ReturnType
    set oMeth.code = ""
    do {
        set chars = met.Implementation.Read()
        set oMeth.code = oMeth.code _ chars
    } while (chars)

    quit oMeth
]]></Implementation>
</Method>

<Method name="inPackage">
<Description><![CDATA[
Returns if <var>packageName</var> is in <var>basePackageName</var>.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>basePackageNames:%String,packageName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set pack = $PIECE(packageName, ".", 1)
	set list = $LISTFROMSTRING(basePackageNames, ",")
	set OK = 0
	for i=1:1:$LISTLENGTH(list) {
		if ($LISTGET(list, i) = pack) {
			set OK = 1
			quit
		}
	}
    quit OK
]]></Implementation>
</Method>

<Method name="extendClassFromType">
<Description>
Wrap registered types to class names</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>typeName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    return $CASE(typeName,
        "%Boolean": "%Library.Boolean",
        "%String": "%Library.String",
        "%Integer": "%Library.Integer",
        "%DataType": "%Library.DataType",
        "%Status": "%Library.Status",
        "%CacheString": "%Library.CacheString",
        "%Persistent": "%Library.Persistent",
        :typeName)
]]></Implementation>
</Method>

<Method name="correctInheritance">
<Description>
Return extended inheritance names</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,baseClassDefinition:%Dictionary.ClassDefinition,basePack:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set superParts = $LISTFROMSTRING(baseClassDefinition.Super, ",")
    for i=1:1:$LISTLENGTH(superParts) {
        set className = $LISTGET(superParts, i)

        // try to find class with base package, if not successfull - try to add class as it is
        if (..classExists(basePack_"."_className)) {
            set clsName = basePack_"."_className
        } else {
            set clsName = ..extendClassFromType(className)
        }

        set $LIST(superParts, i) = clsName
    }
    quit $LISTTOSTRING(superParts)
]]></Implementation>
</Method>

<Method name="collectInheritance">
<Description>
Fill inheritance data
Returns new (correct) super</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>oData:%ZEN.proxyObject,super:%String,level:%String="",currLevel:%Integer=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set superParts = $LISTFROMSTRING(super, ",")
    for i=1:1:$LISTLENGTH(superParts) {
        do ..fillClassData(oData, $LISTGET(superParts, i), level, currLevel)
    }
    quit $$$OK
]]></Implementation>
</Method>

<Method name="getBaseOData">
<Description>
Setup basic output data object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>packageName:%String,baseNamespace:%String,savedName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set oData = ##class(%ZEN.proxyObject).%New()
    set oData.basePackageName = packageName
    set oData.restrictPackage = 1 // expand classes only in base package
    set oData.classes = ##class(%ZEN.proxyObject).%New()

    set ns = $namespace
    zn baseNamespace
    if $get(^ClassExplorer("savedView", ns_":"_savedName)) '= "" {
        set oData.savedView = $get(^ClassExplorer("savedView", ns_":"_savedName))
    }
    zn ns

    quit oData
]]></Implementation>
</Method>

<Method name="classExists">
<Description>
Returns if class with given name exists.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>className:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[    quit ##class(%Dictionary.ClassDefinition).%OpenId(className) '= ""
]]></Implementation>
</Method>

<Method name="getPackageView">
<Description>
Returns structured package data</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>rootPackageName:%String,namespace:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set baseNamespace = $namespace
    zn:$GET(namespace)'="" namespace
    set oData = ..getBaseOData(rootPackageName, baseNamespace, "PACKAGE:"_rootPackageName)
    set classes = ##class(%ResultSet).%New("%Dictionary.ClassDefinition:Summary")
    do classes.Execute()
    set listLen = $LISTLENGTH($LISTFROMSTRING(rootPackageName, ".")) // bottom level of package to extract

    while (classes.Next()) {
        set className = classes.Data("Name")
        set packageName = $LISTTOSTRING($LIST($LISTFROMSTRING(className, "."), 1, listLen), ".")
        if (packageName = rootPackageName) {
            do ..fillClassData(oData, className)
        }
    }

    quit oData
]]></Implementation>
</Method>

<Method name="getArbitraryView">
<ClassMethod>1</ClassMethod>
<FormalSpec>classList:%String,namespace:%String,level:%String=""</FormalSpec>
<Implementation><![CDATA[
	set baseNamespace = $namespace
    zn:$GET(namespace)'="" namespace
    set list = $LISTFROMSTRING(classList, ",")

    set basePackages = $LB()
    set count = 0
    for i=1:1:$LISTLENGTH(list) {
	    set packName = $PIECE($LISTGET(list, i), ".", 1)
	    if ($LISTFIND(basePackages, packName) = 0) {
		    set $LIST(basePackages, count + 1) = packName
		    set count = count + 1
	    }
    }

    set oData = ..getBaseOData($LISTTOSTRING(basePackages, ",", 1), baseNamespace, "ARBITRARY:"_classList)

    for i=1:1:$LISTLENGTH(list) {
		do ..fillClassData(oData, $LISTGET(list, i), level)
    }

    quit oData
]]></Implementation>
</Method>
</Class>


<Project name="ClassExplorer" LastModified="2016-04-13 08:06:28.625227">
  <Items>
    <ProjectItem name="ClassExplorer.ClassView" type="CLS"></ProjectItem>
    <ProjectItem name="ClassExplorer.Router" type="CLS"></ProjectItem>
    <ProjectItem name="ClassExplorer.StaticContent" type="CLS"></ProjectItem>
    <ProjectItem name="ClassExplorer.WebAppInstaller" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="ClassExplorer.Router">
<Description>
REST interface for ClassExplorer</Description>
<Super>%CSP.REST</Super>
<TimeChanged>64021,43403.26812</TimeChanged>
<TimeCreated>63648,30450.187229</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
   <Route Url="/" Method="GET" Call="Index"/>
   <Route Url="/index" Method="GET" Call="Index"/>
   <Route Url="/css/CacheClassExplorer.css" Method="GET" Call="GetCss"/>
   <Route Url="/js/CacheClassExplorer.js" Method="GET" Call="GetJs"/>
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/GetClassTree" Method="GET" Call="GetClassTree"/>
   <Route Url="/GetAllNamespacesList" Method="GET" Call="GetAllNamespacesList"/>
   <Route Url="/GetPackageView" Method="GET" Call="GetPackageView"/>
   <Route Url="/GetArbitraryView" Method="GET" Call="GetArbitraryView"/>
   <Route Url="/GetMethod" Method="GET" Call="GetMethod"/>
   <Route Url="/SaveView" Method="POST" Call="SaveView"/>
   <Route Url="/ResetView" Method="GET" Call="ResetView"/>
</Routes>
]]></Data>
</XData>

<Method name="GetClassTree">
<Description>
Method returns whole class tree visible in the current namespace.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..ReturnJSON(##class(ClassExplorer.ClassView).getClassTree(%request.Get("namespace")))
    return $$$OK
]]></Implementation>
</Method>

<Method name="ReturnJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>data:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    if ($data(%request)) {
      Set %response.CharSet     = ##class(%SYS.NLS.Table).GetCSPTable()
      Set %response.ContentType = "application/json"
    }
    return data.%ToJSON(, "o")
]]></Implementation>
</Method>

<Method name="GetArbitraryView">
<Description>
Returns classTree by given class name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set classList = %request.Get("list")
    set classData = ##class(ClassView).getArbitraryView(classList, %request.Get("namespace"), %request.Get("level"))
    do ..ReturnJSON(classData)
    return $$$OK
]]></Implementation>
</Method>

<Method name="SaveView">
<Description>
Saves the view preferences</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set name = %request.Get("name")
    set content = %request.Content.Read($$$MaxStringLength) // ~ 7mb
    set ^ClassExplorer("savedView", name) = content
    write "{""OK"":true}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="ResetView">
<Description>
Saves the view preferences</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set name = %request.Get("name")
    kill ^ClassExplorer("savedView", name)
    write "{""OK"":true}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetPackageView">
<Description>
Returns all package class trees by given package name</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set packageName = %request.Get("name")
    set classData = ##class(ClassView).getPackageView(packageName, %request.Get("namespace"))
    do ..ReturnJSON(classData)
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetAllNamespacesList">
<Description>
Return the list of all namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    do ..ReturnJSON(##class(ClassExplorer.ClassView).getAllNamespacesList())
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetMethod">
<Description>
Returns method description and code</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set className = %request.Get("className")
    set methodName = %request.Get("methodName")
    set methodData = ##class(ClassView).getMethod(className, methodName, %request.Get("namespace"))
    do ..ReturnJSON(methodData)
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetCss">
<Description>
Method returns user application CSS.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/css"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
   
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("CSS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetJs">
<Description>
Method returns user application JavaScript.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    set %response.CharSet = "utf-8"
    set %response.ContentType = "text/javascript"
    do %response.SetHeader("Last-Modified", $$$CompileTime)
    
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("JS")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="Index">
<Description>
Method returns user application HTML.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #define CompileTime ##Expression("""" _ $zd($h, 11) _ ", "_ $zdt($NOW(0), 2,1) _ " GMT""")
    do %response.SetHeader("Last-Modified", $$$CompileTime)
        
    if %request.GetCgiEnv("HTTP_IF_MODIFIED_SINCE")=$$$CompileTime {
        do ..Http304()
    } else {
        do ##class(StaticContent).Write("HTML")
    }
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="Http304">
<Description>
Issue an "304 Not Modified" status</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set %response.Status="304 Not Modified"
    Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="ClassExplorer.StaticContent">
<Description>
Cache Class Explorer vX.X.X/*build.replace:pkg.version*/ static content generator.
Class contains methods that return JS/CSS/HTML data for single page application.</Description>
<TimeChanged>63670,71368.846177</TimeChanged>
<TimeCreated>63663,71456.865723</TimeCreated>

<Method name="Write">
<Description>
Write the contents of xData tag</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Const:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set xdata = ##class(%Dictionary.CompiledXData).%OpenId("ClassExplorer.StaticContent||"_Const).Data
    set status=##class(%XML.TextReader).ParseStream(xdata, .textreader)
    while textreader.Read() { if (textreader.NodeType="chars") { w textreader.Value } }
    return $$$OK
]]></Implementation>
</Method>

<XData name="HTML">
<Data><![CDATA[
<data><![CDATA[
{{replace:html}}
]]]]><![CDATA[></data>
]]></Data>
</XData>

<XData name="CSS">
<Data><![CDATA[
<data><![CDATA[
{{replace:css}}
]]]]><![CDATA[></data>
]]></Data>
</XData>

<XData name="JS">
<Data><![CDATA[
<data><![CDATA[
{{replace:js}}
]]]]><![CDATA[></data>
]]></Data>
</XData>
</Class>


<Class name="ClassExplorer.WebAppInstaller">
<Super>%Projection.AbstractProjection</Super>
<TimeChanged>63958,46205.449903</TimeChanged>
<TimeCreated>63696,64041.85537</TimeCreated>

<Parameter name="Name">
<Default>/ClassExplorer</Default>
</Parameter>

<Parameter name="DispatchClass">
<Default>ClassExplorer.Router</Default>
</Parameter>

<Projection name="Reference">
<Type>WebAppInstaller</Type>
</Projection>

<Method name="CreateProjection">
<Description>
This method is invoked when a class is compiled.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set properties("NameSpace") = $Namespace
    set properties("Description") = "A WEB application for Cache UML Explorer."
    set properties("IsNameSpaceDefault") = $$$YES
    set properties("DispatchClass") = ..#DispatchClass
	
    new $Namespace
    set $Namespace = "%SYS"
    do ##class(Security.System).GetInstallationSecuritySetting(.security)
    if (security="None") {
        set properties("AutheEnabled") = $$$AutheUnauthenticated
    } else {
        set properties("AutheEnabled") = $$$AutheCache
    } 

    if ('##class(Security.Applications).Exists(..#Name)) {
        write !, "Creating WEB application " _ ..#Name _ "..."
        set st = ##class(Security.Applications).Create(..#Name, .properties)
        write !, "WEB application " _ ..#Name _ " created."
    } else {
	    set st = $$$OK
        write !, "WEB application " _ ..#Name _ " already exists, so it is ready to use."
    }
    quit st
]]></Implementation>
</Method>

<Method name="RemoveProjection">
<Description>
This method is invoked when a class is 'uncompiled'.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[cls:%String,&params,recompile:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    new $Namespace
    set $Namespace = "%SYS"
    set st = $$$OK
    if (##class(Security.Applications).Exists(..#Name)) {
        write !, "Deleting WEB application " _ ..#Name _"..."
        set st = ##class(Security.Applications).Delete(..#Name)
        write !, "WEB application " _ ..#Name _ " was successfully removed."
    }
    quit st
]]></Implementation>
</Method>
</Class>
</Export>
